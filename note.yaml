Thanos Sidecar:
The Thanos Sidecar is added to existing Prometheus servers to persistently store their data in Object Storage (e.g., AWS S3, Google Cloud Storage). This enables backup of Prometheus server data and sharing of data across multiple Prometheus servers.

Thanos Querier:
The Thanos Querier consolidates and queries data collected from multiple Prometheus servers. When a query is executed, the Thanos Querier combines data from Prometheus servers and Object Storage to generate a unified response.

Thanos Store Gateway:
The Thanos Store Gateway reads data stored in Object Storage and responds to queries from Prometheus servers. This allows a central querying service (Querier) to query not only Prometheus server data but also data stored in Object Storage.

Thanos Ruler:
The Thanos Ruler performs functions similar to the existing Prometheus Alertmanager. It evaluates and manages rules and alerts, forwarding results to the Alertmanager for alert processing and notifications.

Thanos Compactor:
The Thanos Compactor continuously optimizes and merges data in Object Storage, addressing the growing size of stored data. This helps optimize data size in the long term.

Prometheus Server:

The core component responsible for collecting and storing time-series data. It uses a pull-based model to scrape metrics from configured targets and stores the data locally.
Prometheus Storage:

Manages the local storage of time-series data collected by the Prometheus server. Data is stored in a time-series database, making it efficient for querying historical metrics.
Prometheus Query Language (PromQL):

A powerful query language used to retrieve and analyze time-series data stored in Prometheus. PromQL allows users to perform complex queries and aggregations.
Alertmanager:

Manages and processes alerts generated by Prometheus. It allows users to define alerting rules and handles the routing and notification of alerts to various channels (e.g., email, Slack).
Exporters:

Specialized components that expose metrics from third-party systems in a format Prometheus can scrape. Exporters enable Prometheus to monitor diverse applications and services.
Node Exporter:

A commonly used exporter for collecting system-level metrics from hosts, including CPU usage, memory usage, disk space, and network statistics.
Pushgateway:

Allows short-lived jobs or batch processes to push metrics to Prometheus. This is useful for scenarios where the usual pull-based model isn't suitable.

curl -XPOST -d '[{"labels":{"alertname":"TestAlert"},"annotations":{"summary":"Test notification"}}]' http://alertmanager-url:port/api/v1/alerts

kubectl delete crd alertmanagerconfigs.monitoring.coreos.com
kubectl delete crd alertmanagers.monitoring.coreos.com
kubectl delete crd podmonitors.monitoring.coreos.com
kubectl delete crd probes.monitoring.coreos.com
kubectl delete crd prometheusagents.monitoring.coreos.com
kubectl delete crd prometheuses.monitoring.coreos.com
kubectl delete crd prometheusrules.monitoring.coreos.com
kubectl delete crd scrapeconfigs.monitoring.coreos.com
kubectl delete crd servicemonitors.monitoring.coreos.com
kubectl delete crd thanosrulers.monitoring.coreos.com

cat <<EOF > objstore.yaml
type: s3
config:
  bucket: thanos
  endpoint: thanos-minio:9000
  access_key: admin
  secret_key: password
  insecure: true
EOF


kubectl create namespace monitoring
kubectl create secret generic objstore-secret \
  --from-file=objstore.yml \
  --namespace monitoring

cat <<EOF > value-override-thanos-sidecar.yaml
prometheus:
  prometheusSpec:
    thanos:
      objectStorageConfig:
        key: objstore.yml
        name: objstore-secret
EOF


helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
helm repo add bitnami https://charts.bitnami.com/bitnami
helm repo update

helm install thanos bitnami/thanos \
  --namespace monitoring \
  --set query.dnsDiscovery.enabled=true \
  --set "query.dnsDiscovery.sidecarsService=kube-prometheus-stack-thanos-discovery" \
  --set query.dnsDiscovery.sidecarsNamespace=monitoring \
  --set minio.enabled=true \
  --set minio.auth.rootPassword=password

helm install prometheus-operator-crds prometheus-community/kube-prometheus-stack \
  --namespace monitoring

helm install kube-prometheus-stack prometheus-community/kube-prometheus-stack \
  --values value-override-thanos-sidecar.yaml \
  --namespace monitoring \
  --set prometheus.thanosService.enabled=true \
  --set "prometheus.thanosService.clusterIP= "


  . Introduction
1.1 What is Prometheus?
Prometheus is an open-source monitoring and alerting toolkit designed for reliability and scalability. It excels in collecting and querying time-series data, making it essential for service monitoring.
1.2 What is Thanos?
Thanos is an extension to Prometheus that adds a global-scale view, long-term storage capabilities, and additional query functionalities, addressing the challenges of high cardinality and long-term data retention.
1.3 Background of Adoption
Explore the reasons behind considering Prometheus and Thanos for monitoring, addressing the need for enhanced scalability, reliability, and long-term data retention.
2. Prometheus
2.1 Architecture
Understand the fundamental architecture of Prometheus, which follows a server-scraping model. Learn how it efficiently stores and queries time-series data.
2.2 Key Features
2.2.1 Multidimensional Data Model
Explore Prometheus's flexible data model, allowing efficient representation of complex metrics data.
2.2.2 Query Language
Discover the powerful PromQL query language for extracting meaningful insights from time-series data.
2.2.3 Alerts and Notifications
Learn how Prometheus provides alerting capabilities, ensuring proactive monitoring and issue resolution.
2.3 Use Cases
2.3.1 Service Reliability Monitoring
Real-world examples showcasing how Prometheus enhances service reliability through effective monitoring.
2.3.2 Resource Usage Monitoring
Explore use cases demonstrating Prometheus's capability to monitor resource usage effectively.
3. Thanos
3.1 Architecture
Understand Thanos's architecture, extending Prometheus with global query and long-term storage components.
3.2 Key Features
3.2.1 Global Viewer
Discover how Thanos provides a global view of metrics across multiple Prometheus instances.
3.2.2 Long-Term Storage
Learn about Thanos's long-term storage capabilities, addressing the challenges of retaining historical data.
3.2.3 Query Language
Explore additional query functionalities introduced by Thanos to enhance data exploration.
3.3 Use Cases
3.3.1 Data Retention and Exploration
Real-world scenarios showcasing how Thanos enables efficient data retention and exploration.
3.3.2 Scalability and Performance
Understand how Thanos contributes to scalability and ensures optimal performance in large-scale deployments.
4. Integration of Prometheus and Thanos
4.1 Data Retention and Scalability
Learn about the seamless integration of Prometheus and Thanos, addressing data retention challenges and enhancing scalability.
4.2 Integration Benefits
Understand the advantages of integrating Prometheus and Thanos, including enhanced global visibility and improved long-term data storage.
4.3 Implementation Examples
Explore practical examples demonstrating how to implement the integration of Prometheus and Thanos effectively.
5. Results and Future Plans
5.1 Post-Adoption Impact
Evaluate the impact of adopting Prometheus and Thanos on monitoring capabilities and overall system reliability.
5.2 Additional Features and Upgrade Roadmap
Discuss future plans, including additional features, upgrades, and optimizations to further enhance monitoring capabilities.
6. Q&A and Discussion
Engage in a question-and-answer session and open discussion to address queries and gather feedback from the team.


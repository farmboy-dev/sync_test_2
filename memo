from mage_ai.settings.repo import get_repo_path
from mage_ai.io.config import ConfigFileLoader
from mage_ai.io.oracledb import OracleDB
from os import path
if 'data_loader' not in globals():
    from mage_ai.data_preparation.decorators import data_loader
if 'test' not in globals():
    from mage_ai.data_preparation.decorators import test


@data_loader
def load_data_from_oracledb(*args, **kwargs):
    """
    Template for loading data from a OracleDB database.
    Specify your configuration settings in 'io_config.yaml'.

    """
    query = 'SELECT * FROM data'  # Specify your SQL query here
    config_path = path.join(get_repo_path(), 'io_config.yaml')
    config_profile = 'oracle_thick_test'

    with OracleDB.with_config(ConfigFileLoader(config_path, config_profile)) as loader:
        return loader.load(query)


@test
def test_output(output, *args) -> None:
    """
    Template code for testing the output of the block.
    """
    assert output is not None, 'The output is undefined'

---------------------------------------------------------------------------

ValueError                                Traceback (most recent call last)

File /home/src/default_repo/data_loaders/oracle_dataloader.py:22, in load_data_from_oracledb(*args, **kwargs)

     19 config_path = path.join(get_repo_path(), 'io_config.yaml')

     20 config_profile = 'oracle_thick_test'

---> 22 with OracleDB.with_config(ConfigFileLoader(config_path, config_profile)) as loader:

     23     return loader.load(query)

 

File /usr/local/lib/python3.10/site-packages/mage_ai/io/base.py:375, in BaseSQLConnection.__enter__(self)

    374 def __enter__(self):

--> 375     self.open()

    376     return self

 

File /usr/local/lib/python3.10/site-packages/mage_ai/io/oracledb.py:44, in OracleDB.open(self)

     42 def open(self) -> None:

     43     with self.printer.print_msg('Opening connection to OracleDB database (thin mode)'):

---> 44         self._ctx = oracledb.connect(**self.settings)

 

File /usr/local/lib/python3.10/site-packages/oracledb/connection.py:1008, in _connection_factory.<locals>.connect(dsn, pool, conn_class, params, **kwargs)

   1006 if not issubclass(conn_class, Connection):

   1007     errors._raise_err(errors.ERR_INVALID_CONN_CLASS)

-> 1008 return conn_class(dsn=dsn, pool=pool, params=params, **kwargs)

 

File /usr/local/lib/python3.10/site-packages/oracledb/connection.py:112, in Connection.__init__(self, dsn, pool, params, **kwargs)

    110 else:

    111     params_impl = params._impl.copy()

--> 112 dsn = params_impl.process_args(dsn, kwargs, thin)

    114 # see if connection is being acquired from a pool

    115 if pool is None:

 

File src/oracledb/impl/base/connect_params.pyx:607, in oracledb.base_impl.ConnectParamsImpl.process_args()

 

File src/oracledb/impl/base/connect_params.pyx:155, in oracledb.base_impl.ConnectParamsImpl.set()

 

File src/oracledb/impl/base/utils.pyx:91, in oracledb.base_impl._set_uint_param()

 

ValueError: invalid literal for int() with base 10: 'thick'
